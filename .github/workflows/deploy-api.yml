name: Deploy API to Azure Functions

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/api/**'
      - 'packages/**'
      - '.github/workflows/deploy-api.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/api/**'
      - 'packages/**'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  lint-and-typecheck:
    name: Lint and Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/api
          pnpm install --frozen-lockfile

      - name: Lint
        run: |
          cd apps/api
          pnpm run lint

      - name: Typecheck
        run: |
          cd apps/api
          pnpm run typecheck

      - name: Run tests
        run: |
          cd apps/api
          pnpm run test

  build:
    name: Build API
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/api
          pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          cd packages/lib
          pnpm run build

      - name: Build API
        run: |
          cd apps/api
          pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: apps/api/dist
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api/dist

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.AZURE_FUNCTION_APP_NAME_STAGING }}
          package: apps/api/dist
          publish-profile: ${{ secrets.AZURE_FUNCTION_PUBLISH_PROFILE_STAGING }}

      - name: Configure Application Settings
        run: |
          az functionapp config appsettings set \
            --name ${{ secrets.AZURE_FUNCTION_APP_NAME_STAGING }} \
            --resource-group ${{ secrets.AZURE_FUNCTION_RESOURCE_GROUP_STAGING }} \
            --settings \
              NODE_ENV=staging \
              COSMOS_DB_ENDPOINT=${{ secrets.COSMOS_DB_ENDPOINT_STAGING }} \
              COSMOS_DB_KEY=${{ secrets.COSMOS_DB_KEY_STAGING }} \
              COSMOS_DB_DATABASE_ID=${{ secrets.COSMOS_DB_DATABASE_ID_STAGING }} \
              NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
              NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_STAGING }} \
              GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              MICROSOFT_CLIENT_ID=${{ secrets.MICROSOFT_CLIENT_ID }} \
              MICROSOFT_CLIENT_SECRET=${{ secrets.MICROSOFT_CLIENT_SECRET }} \
              APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING_STAGING }} \
              WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }} \
              ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS_STAGING }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: apps/api/dist

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PRODUCTION }}

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.AZURE_FUNCTION_APP_NAME_PRODUCTION }}
          package: apps/api/dist
          publish-profile: ${{ secrets.AZURE_FUNCTION_PUBLISH_PROFILE_PRODUCTION }}

      - name: Configure Application Settings
        run: |
          az functionapp config appsettings set \
            --name ${{ secrets.AZURE_FUNCTION_APP_NAME_PRODUCTION }} \
            --resource-group ${{ secrets.AZURE_FUNCTION_RESOURCE_GROUP_PRODUCTION }} \
            --settings \
              NODE_ENV=production \
              COSMOS_DB_ENDPOINT=${{ secrets.COSMOS_DB_ENDPOINT_PRODUCTION }} \
              COSMOS_DB_KEY=${{ secrets.COSMOS_DB_KEY_PRODUCTION }} \
              COSMOS_DB_DATABASE_ID=${{ secrets.COSMOS_DB_DATABASE_ID_PRODUCTION }} \
              NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
              NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL_PRODUCTION }} \
              GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              MICROSOFT_CLIENT_ID=${{ secrets.MICROSOFT_CLIENT_ID }} \
              MICROSOFT_CLIENT_SECRET=${{ secrets.MICROSOFT_CLIENT_SECRET }} \
              APPLICATIONINSIGHTS_CONNECTION_STRING=${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING_PRODUCTION }} \
              WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }} \
              ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS_PRODUCTION }}

  health-check-staging:
    name: Health Check Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ secrets.AZURE_FUNCTION_URL_STAGING }}/api/health || exit 1

  health-check-production:
    name: Health Check Production
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          curl -f ${{ secrets.AZURE_FUNCTION_URL_PRODUCTION }}/api/health || exit 1
